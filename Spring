Spring: framework for building Java applications

Spring core framework:



Java Application Server: Tomcat


Inversion of Control(IoC):


configuring Spring COntainer:
	XML file;
	Java Annotations
	Java Source Code


example: 

	1. Configure your Spring Bean: applicationContext.xml
	<beans ... >
		<bean id="myCoach"
			class="com.luv2code.springdemo.BaseballCoach">
		</bean>
	</beans>

	2. Create a Spring Container;
	ClassPathXmlApplicationContext context = new 
		ClassPathXmlApplicationContext("applicationContext.xml");

	3. Retrieve Beans from Container
	Coach theCoach = context.getBean("myCoach", Coach.class);

	When we pass the interface to the method, behind the scenes Spring will cast the object for you.throwing a BeanNotOfRequiredTypeException if the bean is not of the required type.



Spring Bean is a Java object

Create dependency:

Constructor injection:

	1. Define the dependency interface and class;

	2. Create a constructor in your class for injections

	3. Configure the dependency file in Spring config file

	in XML file:
	<bean id="myFortuneService"
		class="com.luv2code.springdeml.HappyFortuneService">
	</bean>

	<bean id="myCoach"
		class="com.luv2code.springdemo.BaseballCoach">
		<constructor-arg ref="myFortuneService" />
	</bean>

	done by Spring:

	HappyFortuneService myFortuneService = 
		new HappyFortuneService();

	BaseballCoach myCoach = 
		new BaseballCoach(myFortuneService);


Setter injection:

	1. Create setter methods in your class for injections

	2. Configure the dependency injection in Spring config file

	<property name="fortuneService" ref="myFortuneService" />
	setter method has format limit


Inject literal values:
	1. Create the setter method;

	2. Configure the injection in Spring config file

	<property name="emailAddress" value="123456@789.com" />
	setter method has format limit


Inject literal file from a property files:
	1. Create Properties file;

	name-value pair:
	foo.email = ...
	foo.team = ...

	2. Load Properties file in spring config file

	<context: property-placeholder location="classpath:filename"/>

	3. reference values from properties file

	${the prop name}
	<property name="emailAddress" value="${foo.email}" />


Bean Scopes:

Singleton: 
	create only one instance of the bean, all requests for the bean will return a SHARED reference to the SAME bean

	Coach theCoach context.getBean("myCoach", Coach.class);
	Coach alphaCoach = context.getBean("myCoach", Coach.class);

	all above points to the same bean, it only creates one bean

	Explicitly specify Bean Scope:
	set bean scope:
		<bean id="myCoach"
			class="com.luv2code.springdemo.BaseballCoach"
			scope="singleton">
			<constructor-arg ref="myFortuneService" />
		</bean>

Additional Spring Bean Scopes:
	prototype request session global-session

prototype:
	new object for each request


Bean Lifecycle method:
	A. container started
	B. Bean instantiated
	C. Dependencies injected
	D. Internal Spring Processing
	E. Your custom init method
	F. Bean is ready for use and container is shutdown
	G. Custom destroy method


Init/Destroy: method configuration
<bean id="myCoach"
	class="com.luv2code.springdemo.BaseballCoach"
	init-method="doMyStartupStuff"
	destroy-method="doMyCleanupStuuff">
</bean>

these methods can have any access modifier(public, protected, private);
any return type (void is most commonly used);
the method cannot accept any arguments, should be no-arg;

Destroy method is not called for beans of scope prototype. This is because the context doesn't keep track of the prototype scope objects (if it does, it will cause a memory leak as spring doesn't know when to dispose it).


Java Annotations:
special labels/ makers added to Java classes;
Provide meta-data about the class


	1. Eable component scanning in Spring config file
	<beans ...>
		<context:component=scan base-package="co.luv2code.springdemo" />
	</beans>

	spring will scan the package automatically and recursively

	2. Add the @Component Annotation to your Java classes
	@Component("thatSillyCoach") //bean ID
	public class RnnisCoach implements Coach{
		...
	}

	3. Retrieve bean from Spring container
	Coach theCoach = context.getBean("thatSillyCoach", Coach.class);



Default Bean ID:
	the class name, make the first letter lower-case
	TennisCoach --> tennisCoach
	Use the default, does not have to give a specific bean id
	when the spring cannot find the corresponding bean id, it throws NoSuchBeanDefinitionException error!


Spring dependency injection using annotations and autowiring:

Constructor injection:
	@Autowired //annotaion for constructor
	Spring will scan for a component

	commented the Autowired annotation. But still it worked:

	As of Spring Framework 4.3, an @Autowired annotation on such a constructor is no longer necessary if the target bean only defines one constructor to begin with. However, if several constructors are available, at least one must be annotated to teach the container which one to use.


Setter injection:
	@Autowired //annotaion for setter

	Autowired method, will do itself automatically, do not have to call it!Including constuctor method and setter method!!!


Method injection:
	Any method, just add @Autowired, Spring will seach for the class, it will run automatically


Field injection:
	inject dependencies by setting field values on your class directly, even private fields
	Accomplished by Java reflection

	no need for setter method;

	place @Autowired directly on the field


Multiple implementations:
	It will throw exceptions, NoUniqueBeanDefinitionException;
	need to tell Spring which bean to use
	@Qualifier("happyFortuneService"), give the bean id! Even the default id.

	can apply on constructor, setter, field injection


RandomService --> randomService (default ID)

RESTFortuneService --> RESTFortuneService (default ID)
No conversion since the first two characters are upper case.
Spring uses the Java Beans Introspector to generate the default bean name.

constructor injection:
//constructor injection
@Autowired
public TennisCoach(@Qualifier("randomFortuneService")FortuneService theFortuneService){
    System.out.println("\nHey! Inside the constructor. Spring will setup the object automatically!");
    this.theFortuneService = theFortuneService;
}
setter method/any other method can use the field injection way!!!


Inject properties file using Java annotations:
	1. Create a properties file to hold your properties. It will be a name value pair.  


	New text file:  src/sport.properties

	foo.email=myeasycoach@luv2code.com
	foo.team=Silly Java Coders

	It must be stored in src/sport.properties

	2. Load the properties file in the XML config file.
	<context:property-placeholder location="classpath:sport.properties"/>  

	3. Inject the properties values into your Swim Coach: SwimCoach.java

	@Value("${foo.email}")
	private String email;
	    
	@Value("${foo.team}")
	private String team;


Bean Scopes with Annotations:
	specify Bean Scope using annotations,
	@Scope("prototype")

Bean Lifecycle Methods with Annotations:
	1. Define the init method and destroy method
	2. Add annotations: @PostConstruct @PreDestroy

	you can give any method name!!!

	@PostContruct and @PreDestroy methods.

	Access modifier

	The method can have any access modifier (public, protected, private)

	Return type
	The method can have any return type. However, "void' is most commonly used. If you give a return type just note that you will not be able to capture the return value. As a result, "void" is commonly used.

	Method name
	The method can have any method name.

	Arguments
	The method can not accept any arguments. The method should be no-arg.

	in the case of prototypes, configured destruction lifecycle callbacks are not called.



Java Configuration Class: No XML
	1. Create a Java class and annotate as @Configuration
	2. Add component scanning support: @ComponentScan
	3. Read Spring Java configuration class
	AnnotationConfigApplicationContext context = 
		new AnnotationConfigApplicationContext(SportConfig.class);
	4. Retrieve bean from Spring container


1. Define method to expose bean

	@Bean
	public Coach swimCoach() { //this is also the bean id
		SwimCoach mySwimCoach = ...
	}


2. Inject bean dependencies

3. Read Spring Java configuration class

4. Retrieve bean from Spring container



Inject values from properties file:
1. Create Properties File
2. Load
@PropertySource("")
3. Reference Values
@Value("${foo.email}")


Spring MVC: Model-View-Controller
Documentation: www.luv2code.com/spring-mvc-docs

view tempplates: JSP + JSTL

Apache Tomcat
Eclipse(Java EE version)
Connected TomCat to Eclipse


MVC development process:
	1. Create controller class
	@Controller
	it inherits from @Component, supports scanning

	2. Define controller method
	@Controller

	3. Add request mapping to controller method
	@RequestMapping("/")

	4. Return view name

	5. Develop view page


Read form data using Spring MVC:
	1. Controller class
	2. Show HTML form
	3. Process HTML form


JSP:
	<br> one space line
	in jsp, to the router, do not add "/""


Adding data to the spring model:
controller put data in the model
JSP can access data from the model

s
Tomcat reload the page, every 10 seconds


How to use CSS, JS and images in Spring MVC app:
	Any static resource is processed as a URL Mapping in Spring MVC.

	Step 1: Add the following entry to your Spring MVC configuration file: spring-mvc-demo-servlet.xml

	You can place this entry anywhere in your Spring MVC config file.

	<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources> 

	Step 2: Now in your view pages, you can access the static files using this syntax:

	<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png"> 

	You need to use the JSP expression ${pageContext.request.contextPath} to access the correct root directory for your web application.

	Apply the same technique for reading CSS and JavaScript.

	---

	Here's a full example that reads CSS, JavaScript and images.

	<!DOCTYPE html> <html>

	<head>

	    <link rel="stylesheet" type="text/css"           

	           href="${pageContext.request.contextPath}/resources/css/my-test.css">

	    <script src="${pageContext.request.contextPath}/resources/js/simple-test.js"></script>

	</head>

	<body>

	<h2>Spring MVC Demo - Home Page</h2>

	<a href="hello">Plain Hello World</a>

	<br><br>

	<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png" />

	<br><br>

	<input type="button" onclick="doSomeWork()" value="Click Me"/>

	</body>

	</html>


example 1:
@RequestMapping("/processFormVersionTwo")
    public String addToTheForm(HttpServletRequest req, Model model){

        //Read the data from HTML form
        String data = req.getParameter("studentName");

        //convert data
        data = data.toUpperCase();

        //create the message
        String res = data + " First trial Good Good!!!";

        //add message to the model
        model.addAttribute("message", res);

        return "helloWorld";

    }


different to read the form data:
	Using @RequestParam() to read the data

	public String addToTheFormVersionTwo(
            @RequestParam("studentName") String data, Model model){}


Controller Request Mapping:
	@RequestMapping("/funny")
	public class FunnyController{
		@RequestMapping("/showForm")
		public String showForm(){

		}
	}
	final route: /funny/showForm


***Why do not have to add in the form action?***

The HTML form uses "processForm" for the form action. Notice that it does not have a forward slash, as a result, this will be relative to the current browser URL. Since the current browser URL is 


Spring MVC form tags:
make use of data binding


Web structure: JSP
	<html>
		regular html...
		Spring MVC form tags ...
		more html ...
	</html>

How to reference Spring MVC form tags:
	specify the spring namespace at beginning of JSP file
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>


Spring MVC form tag for text field:
	before show the form, add a model attribute;


	When form is loaded, Spring MVC will call:
		student.getFirstName()

	When form is submitted, Spring MVC will call:
		student.setFirstName()


Spring MVC form tag for drop down list:
	<form:select path="country">
		<form:option value="Brazil" label="Brazil"/>
		...
		//value is the code
		//label is for displayc

	</form:select>

    <form:select path="country">
        <form:options items="${student.countryOptions}"/>
    </form:select>


Spring MVC Radio Button:
	<form:radiobutton path="..." value="..." />
	On submit, Spring will call set method according to path
	If want to use radiobuttons, use the LinkedHashMap<> as before, the first String is the label

	Map<a, b>: a is value, b is label

	remmeber the setter method and getter method of the path attribute!!! for using ${} and "path"


Spring MVC checkbox:
	<form:checkbox path="..." value="..." />
	support multiple options
	array return

Spring MVC validation:

Java's Bean Validation API:
	@NotNull	checks that the annotated value is not null
	@Min 		Must be a number >= value
	@Max 		Must be a number <= value
	@Size 		Size must match the given size
	@Pattern 	Must match a regular expression pattern
	@Future/@Past Date must be in future or past of given date


Setting Up Development Environment:

Using Hibernate Validation

Trim the white space:
	@InitBinder, pre-process all web requess coming to our controllers
    @InitBinder
    public void initBiner(WebDataBinder theWebDataBinder) {
        StringTrimmerEditor stringTrimmerEditor = new StringTrimmerEditor(true);
        //this is difined in Spring API
        //true - means trim to null

        theWebDataBinder.registerCustomEditor(String.class, stringTrimmerEditor);
        //for every String form data, applying the editor
    }



Min and max limit:
    @Max(value = 10, message = "Number should be less or equal to 10")
    @Min(value = 0, message = "Number should be larger or equal to 0")
    private int freePasses;

Regular Expression:
	tutorials:
		https://docs.oracle.com/javase/tutorial/essential/regex/

Validate a Postal Code:
	Apply regular expression;
	@Pattern(regexp="...", message="...")
	//regular expression pattern and error message


    @Pattern(regexp = "^[a-zA-Z0-9]{5}", message = "only 5 characters/digits")
    @NotNull(message="is required!")
    private String postalCode;


Make an Integer Field requiered:

	1. using "Integer" type instead of "int", this can deal with null input type

	2. deal with


custom error message:
	1. create custom error message

	2. load custom messages resource in Spring config file


	typeMismatch.customer.freePasses=Invalid number
	//error type
	//spring model attribute name
	//field name
	//custom message

	<bean id="messageSource"
		  class="org.springframework.context.support.ResourceBundleMessageSource" >
		<property name="basenames" value="resources.messages" />
	</bean>


Custom Validation:
	custom validation returns boolean true or false
	create a custom Java Annotation

create custom validation rule:
	1. create annotation
	2. create the validator class

	@Constraint(...)
	@Target(...)//where can apply 
	@Retention(...)//retain how long
	public @interface CourseCode{

		//define default course code
		public String value() default "LUV";

		...
	}

	--->

	@CourseCode(...)


example 1:
	@Constraint(validatedBy = CourseCodeConstrainValidator.class)
	@Target({ElementType.METHOD, ElementType.FIELD})
	@Retention(RetentionPolicy.RUNTIME)
	public @interface CourseCode {

	    //define default course code
	    public String value() default "CSCI";

	    //define default error message
	    public String message() default "must start with CSCI!";

	    //define default groups
	    public Class<?>[] groups() default {};
	    //can group related constraints

	    //define default payload
	    public Class<? extends Payload>[] payload() default {};
	    //provide sutom details about validation failure

	}



	import javax.validation.ConstraintValidator;
	import javax.validation.ConstraintValidatorContext;

	public class CourseCodeConstrainValidator
	    implements ConstraintValidator<CourseCode, String> {

	    private String coursePreffix;

	    @Override
	    public void initialize(CourseCode constraintAnnotation) {
	        coursePreffix = constraintAnnotation.value();
	    }

	    @Override
	    public boolean isValid(String theCode,
	                           ConstraintValidatorContext constraintValidatorContext) {
	        boolean result = theCode.startsWith(coursePreffix);
	        //need to check for null
	        return false;
	    }
	}


Hibernate: a framework for persisting / saving Java objects in a database

www.hibernate.org

Object-To-Relation Mapping ORM
mapping between Java class and database table

example 1:
	//create Java object
	Student theStudent = new Student("John", "Doe", "john@luv2code.com");
	//firstname, lastname, email fields

	//save it to database
	int theId = (Integer) session.save(theStudent);
	//session is a Hibernate object
	//return the primary key, use it to retrieve from DB


example 2:
	//retrieve object from DB
	Student myStudent = session.get(Student.class, theId);
	//find the student database

example 3:
	//querying for all java objects
	Query query = session.createQuery("from Student");
	//Hibernate Query Language HQL
	List<Student> students = query.list();


Hibernate CRUD (create/read/update/delete)

Hibernate and JDBC:
	Hibernate uses JDBC for all database communications

to build Hibernate App, need:
1. IDE
2. Database Server
3. Hibernate JAR files and JDBC Driver


mySQL:
	1. database table

Connect:

public class TestJdbc {

    public static void main(String[] args) {
        String jdbcUrl = "jdbc:mysql://localHost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC";
        String user = "hbstudent";
        String password = "hbstudent";

        try {
            System.out.println("Connecting database ..." + jdbcUrl);

            Connection myConn =
                    DriverManager.getConnection(jdbcUrl, user, password);

            System.out.println("Connection successful!");

        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }
}


Hibernate development process:

1. Hibernate Configuration file;
2. Annotate Java Class
	Entity Class: java class that is mapped to a database table

	options for mapping:
	XML and Java Annotations

3. Develop Java code to perform database operations


Java Annotations:
	1. Map class to database table
	2. Map field to database column

Java ---> database:
	firstName ---> first_name (convention for seperate words)


From Hibernate:
	SessionFactory & Session


Primary Key: Uniquely indentifies each row in a table, must be a unique value

@GeneratedValue(strategy=GenerationType.IDENTITY)

can define own CUSTOM generation strategy
create subclass of org.hibernate.id.SequenceGenerator
override the method public Serializabel generate(...)


MySQL:
	trucate ...
	//clean up


Hibernate create object:
public static void main (String[] args) {
        //create session factory
        SessionFactory factory = new Configuration()
                .configure("hibernate.cfg.xml")
                .addAnnotatedClass(Student.class)
                .buildSessionFactory();

        //create session
        Session session = factory.getCurrentSession();

        try {
            //use the session object to save java object

            //create 3 student objects
            System.out.println("Creating student object ...");
            Student tmpStudent = new Student("Arthur", "Pendragon", "arthur.pen@fgo.com");

            //start a transaction
            session.beginTransaction();

            //save student object
            System.out.println("Saving ...");
            session.save(tmpStudent);

            //commit transaction
            session.getTransaction().commit();

            System.out.println("Saving finished!");

        } finally {
            factory.close();
        }
    }


Retrieve a Java object with Hibernate:
Retrieve still need session begin and commit

public class ReadStudentDemo {

    public static void main(String[] args) {
        //create session factory
        SessionFactory factory = new Configuration()
                .configure("hibernate.cfg.xml")
                .addAnnotatedClass(Student.class)
                .buildSessionFactory();

        //create session
        Session session = factory.getCurrentSession();

        try {
            //use the session object to save java object

            //create student object
            System.out.println("Retrieving student object ...");

            //start a transaction
            session.beginTransaction();

            Student myStudent = session.get(Student.class, 1);
            System.out.println("Get complete: " + myStudent);

            session.getTransaction().commit();
            System.out.println("Done!");

        } finally {
            factory.close();
        }

    }

}


Query objects with Hibernate:

Retrieving all Students:
List<Student> students = session
						.createQuery("from Student")
						.getResultList();
						//Use Java class name here!


Retrieve students with constrain:
List<Student> theStudents = 
		session
			.createQuery("from Student s where s.lastName='Doe'")
			.getResultList();
			//Use the Java property name


Retrieve Students using OR:
List<Student> theStudents = 
		session
			.createQuery("from Student s where s.lastName='Doe'" + " OR s.firstName='Daffy'")
			.getResultList();
			//Use the Java property name


Retrieve Students using LIKE:
List<Student> theStudents = 
		session
			.createQuery("from Student s where" + " s.email LIKE '%luv2code.com'")
			.getResultList();
			//Use the Java property name
			//ends with luv2code.com
			//just a string, do not have to add "+"


intellij: refactor --- extract --- method


Update objects using Hibernate:
Upate all students:
	session.createQuery("update Student set email='...'")
	.executeUpdate();



Delete objects using Hibernate:
	session.delete(...);
	session.getTransaction().commit();

Another way of deleting:
	session
		.createQuery("delete from Student where id=2")
		.executeUpdate();
		//executeUpdate() using in update and delete


Advanced Mappings:
	One to One
	One to Many, Many to One,
	Many to Many


One to One Mapping:
	an instructor have an instructor_detail database tables


Primary key:
	identify a unique row in a table

foreign key:
	link tables together
	a field in one table that refers to other table

Cascade:
	apply the same operation to related entities


Uni-Directional One-to-One:






































































































