Spring: framework for building Java applications

Spring core framework:



Java Application Server: Tomcat


Inversion of Control(IoC):


configuring Spring COntainer:
	XML file;
	Java Annotations
	Java Source Code


example: 

	1. Configure your Spring Bean: applicationContext.xml
	<beans ... >
		<bean id="myCoach"
			class="com.luv2code.springdemo.BaseballCoach">
		</bean>
	</beans>

	2. Create a Spring Container;
	ClassPathXmlApplicationContext context = new 
		ClassPathXmlApplicationContext("applicationContext.xml");

	3. Retrieve Beans from Container
	Coach theCoach = context.getBean("myCoach", Coach.class);

	When we pass the interface to the method, behind the scenes Spring will cast the object for you.throwing a BeanNotOfRequiredTypeException if the bean is not of the required type.



Spring Bean is a Java object

Create dependency:

Constructor injection:

	1. Define the dependency interface and class;

	2. Create a constructor in your class for injections

	3. Configure the dependency file in Spring config file

	in XML file:
	<bean id="myFortuneService"
		class="com.luv2code.springdeml.HappyFortuneService">
	</bean>

	<bean id="myCoach"
		class="com.luv2code.springdemo.BaseballCoach">
		<constructor-arg ref="myFortuneService" />
	</bean>

	done by Spring:

	HappyFortuneService myFortuneService = 
		new HappyFortuneService();

	BaseballCoach myCoach = 
		new BaseballCoach(myFortuneService);


Setter injection:

	1. Create setter methods in your class for injections

	2. Configure the dependency injection in Spring config file

	<property name="fortuneService" ref="myFortuneService" />
	setter method has format limit


Inject literal values:
	1. Create the setter method;

	2. Configure the injection in Spring config file

	<property name="emailAddress" value="123456@789.com" />
	setter method has format limit


Inject literal file from a property files:
	1. Create Properties file;

	name-value pair:
	foo.email = ...
	foo.team = ...

	2. Load Properties file in spring config file

	<context: property-placeholder location="classpath:filename"/>

	3. reference values from properties file

	${the prop name}
	<property name="emailAddress" value="${foo.email}" />


Bean Scopes:

Singleton: 
	create only one instance of the bean, all requests for the bean will return a SHARED reference to the SAME bean

	Coach theCoach context.getBean("myCoach", Coach.class);
	Coach alphaCoach = context.getBean("myCoach", Coach.class);

	all above points to the same bean, it only creates one bean

	Explicitly specify Bean Scope:
	set bean scope:
		<bean id="myCoach"
			class="com.luv2code.springdemo.BaseballCoach"
			scope="singleton">
			<constructor-arg ref="myFortuneService" />
		</bean>

Additional Spring Bean Scopes:
	prototype request session global-session

prototype:
	new object for each request


Bean Lifecycle method:
	A. container started
	B. Bean instantiated
	C. Dependencies injected
	D. Internal Spring Processing
	E. Your custom init method
	F. Bean is ready for use and container is shutdown
	G. Custom destroy method


Init/Destroy: method configuration
<bean id="myCoach"
	class="com.luv2code.springdemo.BaseballCoach"
	init-method="doMyStartupStuff"
	destroy-method="doMyCleanupStuuff">
</bean>

these methods can have any access modifier(public, protected, private);
any return type (void is most commonly used);
the method cannot accept any arguments, should be no-arg;

Destroy method is not called for beans of scope prototype. This is because the context doesn't keep track of the prototype scope objects (if it does, it will cause a memory leak as spring doesn't know when to dispose it).


Java Annotations:
special labels/ makers added to Java classes;
Provide meta-data about the class














































